图形用户界面:GUI:Graphical User Interface
面向对象:OO:Object Oriented
class c1:
    def sum(self,a,b):
        self.a=a
        self.b=b
    def getsum(self):
        return self.a+self.b
A=c1()
A.sum(10,20)
print(A.getsum())
class c1:
    def __init__(self,a,b):   #__init__可以带参数直接初始化.
        self.a=a
        self.b=b
    def getsum(self):
        return self.a+self.b
A=c1(10,20)
print(A.getsum())

class c2:
    __v1='skt'                #变量前加双下划线使其私有.
    def get(self):
        return self.__v1
B=c2()          
B.__v1                        #无法从外部访问该变量.
B.get()                       #从内部才能访问.
B._c2__v1                     #单下划线加类名再加变量也可以访问.

class List(list):             #表示List继承了list的数据和方法,
    pass                      #即List可以使用list内置函数.
#当子类定义与父类同名的方法或属性则在子类中会覆盖父类的方法或属性
class parent:
    def p(self):
        print('A')
class child(parent):
    def p(self):
        print('B')            #会打印B
class child(parent):
    def p(self):
        parent.p(self)        #将父类方法重新传入子类.
        print('B')            #打印A,B
parent.p(child)               #也可以在函数外部直接将子类作为参数传入.
class child(parent):
    def p(self):
        super().p()           #super不需要传参,会自动找到对应的函数.
        print('B')
class a(base1,base2)          #可以同时继承多个父类.

class A:
    def __init__(self,x):
        self.num=x
class B:
    def __init__(self,x):
        self.num=x
class C:
    def __init__(self,x,y):
        self.a=A(x)
        sele.b=B(y)
        print(self.a.num,self.b.num)

class A:
    def fun(self): #方法和属性同名时会把方法覆盖.
        print('s') 
A.fun=1            #类可以直接定义一个变量.

class B:
    count=0
a=B()
b=B()
a.count+=10        #对象的改变不会影响类.a.count=10,b.count=0.
B.count+=10        #类的改变会影响未作修改的对象和之后定义的对象,
                   #不会影响已经改变的对象.a.count=10,b.count=10.

class a:
    def b():       #不绑定self会导致对象无法访问.
        print('sb')
a.b()              #直接使用类名可以调用.
aa=a()
aa.b()             #使用对象无法访问,因为缺少参数.

class count:
    def set(self,x,y):
        self.x=x
        self.y=y
    def pt(self):
        print(self.x,self.y)
c=count()
c.set(1,2)
count.__dict__     #会输出该类的属性,与对象无关,即c的x,y的值不会出现.
c.__dict__
{'x':1,'y':2}      #只会输出对象的属性.
del count          #删除类后,对象并不会删除.

issubclass(c1,c2)  #判断c1是否为c2的子类,返回True或False.
#一个类会被认识是自己的子类.c2可以是类组成的元组,只要c1是其中一个的子类则返回True.
#object:所有类的基类.
isinstance(o,c)    #判断对象o是否属于类c,c也可以是类组成的元组.
#当第一个参数不为对象或第二个参数不为类直接返回False.
hasattr(o,name)    #判断对象o是否含有属性name.name需要加单引号作为字符串.
getattr(o,name,default)
getattr(o,name,'属性不存在.')
#返回对象o的属性name的值,如果出错也可以设定报错的内容,带引号.
setattr(o,name,v)  #设定对象o的属性name的值,如果不存在则会创建该属性.
delattr(o,n)       #删除属性.
class aa:
    def __init__(self,size=1):
        self.size=size
    def get(self):
        return self.size
    def set(self,v):
        self.size=v
    def del(self):
        def self.size
    x=property(get,set,del)
#第一个参数是获取属性的方法,第二个是设置属性的方法,第三个是删除属性的方法(自己编写).
#好处在于修改方法时不用修改外部接口.
a=aa()                      
a.x                #通过属性来设置属性,直接调用x来设置类的属性.
a.x=2
del a.x
